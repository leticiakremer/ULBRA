// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TrabalhoPooBanco.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sexo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Conta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Contas", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Conta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Resultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mensagem")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Resultados", (string)null);
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Transacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Transacoes", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transacao");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.ContaCorrente", b =>
                {
                    b.HasBaseType("TrabalhoPooBanco.Domain.Entities.Conta");

                    b.HasDiscriminator().HasValue("ContaCorrente");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Deposito", b =>
                {
                    b.HasBaseType("TrabalhoPooBanco.Domain.Entities.Transacao");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContaCorrenteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdDeposito")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ContaCorrenteId");

                    b.ToTable("Transacoes", t =>
                        {
                            t.Property("ClienteId")
                                .HasColumnName("Deposito_ClienteId");
                        });

                    b.HasDiscriminator().HasValue("Deposito");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Saque", b =>
                {
                    b.HasBaseType("TrabalhoPooBanco.Domain.Entities.Transacao");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdSaque")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ClienteId");

                    b.HasDiscriminator().HasValue("Saque");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Transferencia", b =>
                {
                    b.HasBaseType("TrabalhoPooBanco.Domain.Entities.Transacao");

                    b.Property<int?>("DeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTransferencia")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParaId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DeId");

                    b.HasIndex("ParaId");

                    b.HasDiscriminator().HasValue("Transferencia");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Conta", b =>
                {
                    b.HasOne("TrabalhoPooBanco.Domain.Entities.Cliente", "Cliente")
                        .WithOne("Conta")
                        .HasForeignKey("TrabalhoPooBanco.Domain.Entities.Conta", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Deposito", b =>
                {
                    b.HasOne("TrabalhoPooBanco.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("TrabalhoPooBanco.Domain.Entities.ContaCorrente", "ContaCorrente")
                        .WithMany()
                        .HasForeignKey("ContaCorrenteId");

                    b.Navigation("Cliente");

                    b.Navigation("ContaCorrente");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Saque", b =>
                {
                    b.HasOne("TrabalhoPooBanco.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Transferencia", b =>
                {
                    b.HasOne("TrabalhoPooBanco.Domain.Entities.Cliente", "De")
                        .WithMany()
                        .HasForeignKey("DeId");

                    b.HasOne("TrabalhoPooBanco.Domain.Entities.Cliente", "Para")
                        .WithMany()
                        .HasForeignKey("ParaId");

                    b.Navigation("De");

                    b.Navigation("Para");
                });

            modelBuilder.Entity("TrabalhoPooBanco.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Conta");
                });
#pragma warning restore 612, 618
        }
    }
}
